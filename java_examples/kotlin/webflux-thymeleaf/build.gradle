buildscript {
	ext {
		kotlinVersion = '1.1.60'
		springBootVersion = '2.0.0.M6'
		kotlinCorouteVersion = '0.19.3'
		swaggerVersion = '2.7.0'
		exposedVersion = '0.8.7'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.pet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile("io.springfox:springfox-swagger2:${swaggerVersion}")
	compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
	//compile("org.jetbrains.exposed:exposed:${exposedVersion}")
	//compile("org.jetbrains.exposed:spring-transaction:${exposedVersion}")

	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCorouteVersion}")
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:${kotlinCorouteVersion}")
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCorouteVersion}")
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-nio:${kotlinCorouteVersion}")
	compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${kotlinCorouteVersion}")


	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}
kotlin {
	experimental {
		coroutines "enable"
	}
}
