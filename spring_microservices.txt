Basically 2 ways to build applications nowadays:
	- monolith apps
		- advantages:
			- It is well known
			- Have faster calls between components since they are often on the same machine
			- Easy deployment: typically, only a single archive needs to be copied
		- disadvantages:
			- Harder code maintenance: the application will eventually start to break down as the team grows, experienced developers leave and new ones join in.
			- The application is tightly coupled within the tiered layers, and you cannot scale individual components.
			- Limited agility: because of the tighter coupling, a little change in a feature may easily introduce new bugs in the dependent features. The whole application needs to be tested again which can be time-consuming.
			- Stuck with technology stack: it is typically not possible to change the technology stack mid-stream without throwing away or rewriting significant part of the existing application.
			- Technical debt: a monolith application is built over several years with the team that is maintaining the code base completely different from the one that created the application. This increases technical debt of the application and makes it that much harder to refactor the application later on

	- apps with microservices architecture
		-advantages:
			- Easier to develop, understand, and maintain: code in a microservice is restricted to one function of the business and is thus easier to understand.
			- Starts faster than a monolith: scope of each microservice is much smaller than a monolith and this leads to a smaller archive
			- Scale independently: each service can scale independently using X-axis cloning and Z-axis partitioning based upon their need. This is very different from monolithic applications that may have very different requirements and must be deployed together.
			- Improves fault isolation: a misbehaving service, such as with a memory leak or unclosed database connections, will only affect that service as opposed to the entire monolithic application. This improves fault isolation and does not bring the entire application down, just a piece of it.
			- No long term commitment to any stack: developers are free to pick language and stack that is best suited for their service. Even though the organizations may restrict the choice of technology but you are not penalized because of past decisions. It also enables to rewrite the service using better languages and technologies. This gives freedom of choice to pick a technology, tools, and frameworks.
			- Light-weight communication: services communicate with each other using a light-weight communication, such as REST over HTTP. This is inherently synchronous and so could have some potential bottlenecks. An alternative mechanism is to use publish-subscribe mechanism that supports asynchronous messaging
		- However, with microservices, there comes additional requirements that the infrastructure must fulfil:
			- Service replication: each service needs to replicate using X-axis cloning or Z-axis partitioning.
			- Service discovery: services need to be discovered somehow. Multiple services might be collaborating to provide an application functionality; therefore, they need to know about each other.
			- Resiliency: failure in software occurs, no matter how much and how hard you test it. The key question is not “how to avoid failure” but “how to deal with it”. This is all the more prominent in microservices where services are distributed all over the Internet. It is important for services to automatically take corrective action and ensure the user experience is not impacted.
			- Service monitoring: one of the most important aspects of a distributed system is service monitoring and logging. This allows to take a proactive action, for example, if a service is consuming unexpected resources


		
	
Micro-services:
	Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state).
	Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.
	
	Features: Spring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.
	- Distributed/versioned configuration
	- Service registration and discovery
	- Routing
	- Service-to-service calls
	- Load balancing
	- Circuit Breakers
	- Global locks
	- Leadership election and cluster state
	- Distributed messaging
	
Eureka, ZooKeeper: service registry and provide network discovery (prefer to use eureka since it is more resilient to failures)
Hystrix: Fault Tolerance: provide fallback methods in case of failures - on the edge service, microservices. Implements the circuit breaker pattern.
Microservice: invoked by the edge service, and they can invoke each other (hystrix needed if invoking other services for the best user experience - avoid showing stacktraces)
Zuul: egde service implementation: micro proxy, api gateway
	1. Micro proxy: blindly forward packages outside the datacenter inside the loadbalancer
	2. API gateway: transforms the request to the services behind the loadbalancer
Actuator: monitoring capabilities via jmx and rest api (use with the config server)
Config server: central store for configurations of the participants of the system
Hystrix dashboard, Turbine: use for health monitoring
	Turbine: aggregates the Hystrix health monitoring data from each method of each microservice and provides an aggregated result.
Ribbon: round robin load balancer
Zipkin: Zipkin is a distributed tracing system. It helps gathering timing data needed to troubleshoot latency problems in microservice architectures.
Kafka: Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies.

Config service: just a super lightweight service that is used to centralize the configuration data 
	Scenario is that I have multiple microservices and do not want to store config one by one for each service, rather I would store them in a 
	central config server.
	
Messaging: point-to-point service communication is good for reading, however for writing which requires synchronization is not good.
		   We could use distributed transations but Josh Long urges us not to, it just slows down the aggregate system.
		   Instead use messaging: forward to the service on a message bus: job is put into a queue (buffer) and eventually gets picked up by the service.
	- JMS: only between Java-based components
	- AMQP (Advanved Message Queuing Protocol): works between components implemented with different technologies (.NET, Java, Python, ...)
	
Hystrix dashboard, H2 console - good stuff, start.spring.io starters
Spring cloud handles Single Sign on, Oath2 is dead simple


********************************
Microservices transactions vs eventual consistency
********************************

2PC
	+ ensures consistency
	- in exchange for the system is less available
	- not supported by NoSQL databases
	Avoid this in microservices as today availability is more preferred than consistency.
	
Messaging
	+ availability
	- the system is not consistent right now but eventually it will be
	This is the way to go with microservices when an update needs to be done that spans multiple microservices.
	
Reliably publish events when state changes:
	1. Application events: 		the very same transaction that updated the database also places a new record into a dedicated "Events" table. So this is still ACID.
								Another thread continuously pulls for new records and sends corresponding messages to a message broker.
								
	2. Transaction log tailing: interesting
	
	3. Event sourcing: 			event-centric persistence: only events are used. The database and message broker are merged into an Event Store.
								Storing a sequence of events instead of the current state.
								Storing events is an append-only operation.
								Event Sstore stores the events and publishes them as well to consumers (other microservices for example).
								Event Store = database + message - database could be SQL or NoSQL.
								
								1. Specify domain events to each domain object. For example: Order domain object's events are:
																										- OrderCreated
																										- OrderCancelled
																										- OrderApproved
																										- OrderRejected
																										- OrderShipped
								2. Persist events NOT current state!
									- Instead of placing Order entity into Order table, place the event!
									- we have Event table: 	|EntityId|Entity type|Event id|Event type|Event data
															|101     |Order      |OrderCreated       | ...
															|101     |Order      |OrderApproved      | ...
									- so we just store the sequence of events
									- the Event Store also publishes the events, so that consumers (other microservices) can act as necessary.
									
								3. When I want to load the Order entity:
									- query the events from the Event table for a given Order
									- replay those events - OrderCreated(), OrderApproved()
									- if there are lots of events use snapshotting
									
									currentState = foldl(applyEvent, initialState, events)
									
								Drawbacks:
									- Querying the Event Store can be challenging
									- Some queries might be complex/inefficient, e.q. accounts with a balance > X-axis
									- Event Store might only support lookup of events by entity id
									- Must use Command Query Responsibility Segregation (CQRS) to handle queries --> 
										- application must handle eventualy consistent data
										- denormalized views to the rescue - for example storing the view of the Order events in an Order document in MongoDb database
											- MongoDb is kept up to date by subscribing to events published by the Event Store
											
Summary
	- Aggregates are the building blocks of microservices
	- Use events to maintain consistency between aggregates
	- Event sourcing is a good way to implement an event-driven architecture



********************************
Spring cloud deployment
********************************